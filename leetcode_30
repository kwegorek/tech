var maxSubArray = function (nums) {
  let curMax = nums[0]

  for (let i = 0; i < nums.length; i++) {
    let bestSum = 0

    for (let j = i; j < nums.length; j++) {
      bestSum += nums[j]

      if (bestSum > curMax) {
        curMax = bestSum
      }
    }
  }
  return curMax
}

var moveZeroes = function (nums) {
  let index = 0

  for (let i = 0; i < nums.length; i++) {
    if (nums[i] !== 0) {
      nums[index] = nums[i]
      index++
    }
  }

  for (let j = index; j < nums.length; j++) {
    nums[j] = 0
  }

  return nums
}

var groupAnagrams = function (strs) {
  let hashMap = {}

  for (let i = 0; i < strs.length; i++) {
    let stringSorted = strs[i].split('').sort().join('')

    if (hashMap[stringSorted] === undefined) {
      hashMap[stringSorted] = []
      hashMap[stringSorted].push(strs[i])
    } else {
      hashMap[stringSorted].push(strs[i])
    }
  }

  return Object.values(hashMap)
}



var MinStack = function () {
  this.stack = []
  this.min = null
  this.size = this.stack.length
}

/**
 * @param {number} x
 * @return {void}
 */
MinStack.prototype.push = function (x) {
  if (this.stack.length === 0) {
    this.stack[0] = x
    this.min = x
    this.size++
  } else {
    if (x < this.min) {
      this.min = x
    }

    this.stack[this.size] = x
    this.size++
  }

  console.log(this.stack)
}

/**
 * @return {void}
 */
MinStack.prototype.pop = function () {
  let newStack = this.stack.slice(0, this.stack.length - 1)
  let last = this.stack[this.stack.length - 1]
  this.size--
  this.stack = newStack

  if (last === this.min) {
    this.min = Math.min(...this.stack)
  }

  return last
}

/**
 * @return {number}
 */
MinStack.prototype.top = function () {
  return this.stack[0]
}

/**
 * @return {number}
 */
MinStack.prototype.getMin = function () {
  return this.min
}

/**
 * Your MinStack object will be instantiated and called as such:
 * var obj = new MinStack()
 * obj.push(x)
 * obj.pop()
 * var param_3 = obj.top()
 * var param_4 = obj.getMin()
 */

let minStack = new MinStack()

minStack.push(-2)
minStack.push(0)
minStack.push(-3)
console.log(minStack.getMin(), 'min')
// --> Returns -3.
minStack.pop()
console.log(minStack)
console.log(minStack.top(), 'top') // --> Returns 0.
minStack.getMin() // --> Returns -2.

// Do not edit the class below except
// for the breadthFirstSearch method.
// Feel free to add new properties
// and methods to the class.
class Node {
  constructor(name) {
    this.name = name;
    this.children = [];
  }

  addChild(name) {
    this.children.push(new Node(name));
    return this;
  }

  breadthFirstSearch() {
    // Write your code here.
    let queue = [this]; 
    let arr = []; 

    while(queue.length){

      let currentNode = queue.shift(); 

      arr.push(currentNode.name)

      for(let i=0; i<currentNode.children.length;i++){

        queue.push(currentNode.children[i])

      }


    }
    
    return arr

		
  }
}

// Do not edit the line below.

let nodeA = new Node('A'); 

nodeA.addChild('B')

nodeA.children[0].addChild('C')

console.log(nodeA.breadthFirstSearch())
