var maxSubArray = function (nums) {
  let curMax = nums[0]

  for (let i = 0; i < nums.length; i++) {
    let bestSum = 0

    for (let j = i; j < nums.length; j++) {
      bestSum += nums[j]

      if (bestSum > curMax) {
        curMax = bestSum
      }
    }
  }
  return curMax
}

var moveZeroes = function (nums) {
  let index = 0

  for (let i = 0; i < nums.length; i++) {
    if (nums[i] !== 0) {
      nums[index] = nums[i]
      index++
    }
  }

  for (let j = index; j < nums.length; j++) {
    nums[j] = 0
  }

  return nums
}

var groupAnagrams = function (strs) {
  let hashMap = {}

  for (let i = 0; i < strs.length; i++) {
    let stringSorted = strs[i].split('').sort().join('')

    if (hashMap[stringSorted] === undefined) {
      hashMap[stringSorted] = []
      hashMap[stringSorted].push(strs[i])
    } else {
      hashMap[stringSorted].push(strs[i])
    }
  }

  return Object.values(hashMap)
}



var MinStack = function () {
  this.stack = []
  this.min = null
  this.size = this.stack.length
}

/**
 * @param {number} x
 * @return {void}
 */
MinStack.prototype.push = function (x) {
  if (this.stack.length === 0) {
    this.stack[0] = x
    this.min = x
    this.size++
  } else {
    if (x < this.min) {
      this.min = x
    }

    this.stack[this.size] = x
    this.size++
  }

  console.log(this.stack)
}

/**
 * @return {void}
 */
MinStack.prototype.pop = function () {
  let newStack = this.stack.slice(0, this.stack.length - 1)
  let last = this.stack[this.stack.length - 1]
  this.size--
  this.stack = newStack

  if (last === this.min) {
    this.min = Math.min(...this.stack)
  }

  return last
}

/**
 * @return {number}
 */
MinStack.prototype.top = function () {
  return this.stack[0]
}

/**
 * @return {number}
 */
MinStack.prototype.getMin = function () {
  return this.min
}

/**
 * Your MinStack object will be instantiated and called as such:
 * var obj = new MinStack()
 * obj.push(x)
 * obj.pop()
 * var param_3 = obj.top()
 * var param_4 = obj.getMin()
 */

let minStack = new MinStack()

minStack.push(-2)
minStack.push(0)
minStack.push(-3)
console.log(minStack.getMin(), 'min')
// --> Returns -3.
minStack.pop()
console.log(minStack)
console.log(minStack.top(), 'top') // --> Returns 0.
minStack.getMin() // --> Returns -2.

// Do not edit the class below except
// for the breadthFirstSearch method.
// Feel free to add new properties
// and methods to the class.
class Node {
  constructor(name) {
    this.name = name;
    this.children = [];
  }

  addChild(name) {
    this.children.push(new Node(name));
    return this;
  }

  breadthFirstSearch() {
    // Write your code here.
    let queue = [this]; 
    let arr = []; 

    while(queue.length){

      let currentNode = queue.shift(); 

      arr.push(currentNode.name)

      for(let i=0; i<currentNode.children.length;i++){

        queue.push(currentNode.children[i])

      }


    }
    
    return arr

		
  }
}

// Do not edit the line below.

let nodeA = new Node('A'); 

nodeA.addChild('B')

nodeA.children[0].addChild('C')

console.log(nodeA.breadthFirstSearch())

//--------------dfs
// Do not edit the class below except
// for the depthFirstSearch method.
// Feel free to add new properties
// and methods to the class.
class Node {
  constructor(name) {
    this.name = name;
    this.children = [];
  }
  
//rotate left 
function rotate(a,n,d){

    let mostleftElement; 

    while(d > 0){

        mostleftElement = Number(a.splice(0,1).join('')); 
        d--
        a.push(mostleftElement )

    }
    return a.join(' ')
}

  addChild(name) {
    this.children.push(new Node(name));
    return this;
  }

  depthFirstSearch(array) {
    // Write your code here.
	array.push(this.name)
	for(let i =0; i<this.children.length; i++){
			
	 this.children[i].depthFirstSearch(array)
	}
    return array
  }
}

var walk = function (leftBranch, rightBranch) {
  //tree symmetric in value terms root.left=== root.right

  if (leftBranch && rightBranch) {
    let leftValue = leftBranch.val
    let rightValue = rightBranch.val

    if (leftValue != rightValue) {
      return false
    }

    let valuesAndStructureCompareLeft = walk(leftBranch.left, rightBranch.right)
    let valuesAndStructureCompareRight = walk(
      rightBranch.right,
      leftBranch.left
    )

    return valuesAndStructureCompareLeft && valuesAndStructureCompareRight
  } else if (!leftBranch && !rightBranch) {
    return true
  } else {
    return false
  }
}

//traverse at tthe same time

var isSymmetric = function (root) {
  if (root === null) {
    return true
  }

  let inOrderLeft = walk(root.left, root.right)
  let reverseInOrderRight = walk(root.right, root.left)

  return inOrderLeft && reverseInOrderRight
}

//binary search 
var search = function (nums, target) {
  if (nums.length === 0) {
    return -1
  }

  let curMax = nums[0]
  let maxIndx = 0

  for (let i = 0; i < nums.length - 1; i++) {
    if (nums[i + 1] > curMax) {
      curMax = nums[i + 1]
      maxIndx = i + 1
    } else {
      break
    }
  }

  //first
  let left = 0
  let right = maxIndx

  while (left <= right) {
    let sumRanges = left + right

    let mid = Math.floor(sumRanges / 2)
    if (target < nums[mid]) {
      right = mid - 1
    } else if (target > nums[mid]) {
      left = mid + 1
    } else {
      return mid
    }
  }
  //second

  let leftsec = maxIndx + 1
  let rightsec = nums.length - 1

  while (leftsec <= rightsec) {
    let sumRanges = leftsec + rightsec

    let mid = Math.floor(sumRanges / 2)
    if (target < nums[mid]) {
      rightsec = mid - 1
    } else if (target > nums[mid]) {
      leftsec = mid + 1
    } else {
      return mid
    }
  }

  return -1
}

var middleNode = function(head) {
    
    let nodeLength=0; 
    let curNode = head 
    
    while(curNode){

        nodeLength++; 
        curNode = curNode.next
   
    }
    let middle = 0 
    
    if(nodeLength!=0){
        
       middle = Math.floor(nodeLength/2)
     
        }
  
    while(head){
      
        if(middle === 0){
            return head
        }else {
        head= head.next
        middle--
           
        }
       
    }
    
    return head
};
//finding subsequence 

function isValidSubsequence(array, sequence) {
  // Write your code here.

	let pointerSequence = 0
		//traverse the main array 
	for(let i =0; i< array.length; i++){
		
		if(array[i] === sequence[pointerSequence]){
			
			pointerSequence++
			
		}
	}
	if(pointerSequence === sequence.length){
		console.log(sequence.length-1,pointerSequence )
		return true
	}else{
		return false
	}
	//set pointers at the subsequence and move along the first array 
	//to find element from the subsequencee
	//if first element is found move the pointer in the subsequence and in the main 
	//
}

